{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tamil\\\\Downloads\\\\My-React_Projects\\\\React-Projects\\\\AdvancedReactRouter\\\\frontend\\\\src\\\\components\\\\pages\\\\EventDetailPage.js\",\n  _s = $RefreshSig$();\nimport { useParams, Link, useLoaderData as useRouteLoaderData } from \"react-router-dom\";\nimport EventItem from '../EventItem';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EventDetailPage() {\n  _s();\n  // const params = useParams()\n\n  const data = useRouteLoaderData();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"The event detail page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(EventItem, {\n      event: data.event\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n}\n_s(EventDetailPage, \"4DBW6nwrvXRMSwRBgIay5Sszcp8=\", false, function () {\n  return [useRouteLoaderData];\n});\n_c = EventDetailPage;\nexport default EventDetailPage;\nexport async function loader({\n  request,\n  params\n}) {\n  const id = params.eventId;\n  const response = await fetch('http://localhost:8080/events/' + id);\n  if (!response.ok) {\n    throw new Response(JSON.stringify({\n      message: 'Could not fetch events'\n    }), {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"EventDetailPage\");","map":{"version":3,"names":["useParams","Link","useLoaderData","useRouteLoaderData","EventItem","jsxDEV","_jsxDEV","Fragment","_Fragment","EventDetailPage","_s","data","children","fileName","_jsxFileName","lineNumber","columnNumber","event","_c","loader","request","params","id","eventId","response","fetch","ok","Response","JSON","stringify","message","status","$RefreshReg$"],"sources":["C:/Users/tamil/Downloads/My-React_Projects/React-Projects/AdvancedReactRouter/frontend/src/components/pages/EventDetailPage.js"],"sourcesContent":["import { useParams, Link, useLoaderData as useRouteLoaderData } from \"react-router-dom\";\r\nimport EventItem from '../EventItem'\r\nfunction EventDetailPage() {\r\n\r\n    // const params = useParams()\r\n\r\n    const data = useRouteLoaderData()\r\n     \r\n    return (<>\r\n                <h1>The event detail page</h1>\r\n    \r\n                <EventItem event={data.event} />\r\n                {/* <Link to='..' relative=\"path\"> Back</Link> */}\r\n            </>\r\n        \r\n        \r\n    )\r\n}\r\n\r\nexport default EventDetailPage;\r\n\r\n\r\nexport async function loader({request, params}) {\r\n\r\n    const id = params.eventId\r\n    \r\n    const response =  await fetch('http://localhost:8080/events/' + id)\r\n\r\n    if (!response.ok) {\r\n        throw new Response(\r\n                JSON.stringify({message: 'Could not fetch events'}),\r\n                { status: 500 }\r\n              )\r\n    }\r\n    else{\r\n            return response\r\n\r\n    }\r\n\r\n}"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,IAAI,EAAEC,aAAa,IAAIC,kBAAkB,QAAQ,kBAAkB;AACvF,OAAOC,SAAS,MAAM,cAAc;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACpC,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EAEvB;;EAEA,MAAMC,IAAI,GAAGR,kBAAkB,CAAC,CAAC;EAEjC,oBAAQG,OAAA,CAAAE,SAAA;IAAAI,QAAA,gBACIN,OAAA;MAAAM,QAAA,EAAI;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAE9BV,OAAA,CAACF,SAAS;MAACa,KAAK,EAAEN,IAAI,CAACM;IAAM;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eAElC,CAAC;AAIf;AAACN,EAAA,CAfQD,eAAe;EAAA,QAIPN,kBAAkB;AAAA;AAAAe,EAAA,GAJ1BT,eAAe;AAiBxB,eAAeA,eAAe;AAG9B,OAAO,eAAeU,MAAMA,CAAC;EAACC,OAAO;EAAEC;AAAM,CAAC,EAAE;EAE5C,MAAMC,EAAE,GAAGD,MAAM,CAACE,OAAO;EAEzB,MAAMC,QAAQ,GAAI,MAAMC,KAAK,CAAC,+BAA+B,GAAGH,EAAE,CAAC;EAEnE,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;IACd,MAAM,IAAIC,QAAQ,CACVC,IAAI,CAACC,SAAS,CAAC;MAACC,OAAO,EAAE;IAAwB,CAAC,CAAC,EACnD;MAAEC,MAAM,EAAE;IAAI,CAChB,CAAC;EACX,CAAC,MACG;IACI,OAAOP,QAAQ;EAEvB;AAEJ;AAAC,IAAAN,EAAA;AAAAc,YAAA,CAAAd,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}