
*{
    margin: 0;
    padding: 0;
}

body{
    background-color: #f4f1e8;
    background-image: repeating-linear-gradient(45deg, transparent, transparent 3px, rgba(0,0,0,.02) 3px, rgba(0,0,0,.02) 6px);
    position: relative;
    min-height: 100vh;
}

/* Add vintage newspaper texture overlay */
body::before {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: 
        radial-gradient(circle at 20% 30%, rgba(139,119,101,0.08) 1px, transparent 1px),
        radial-gradient(circle at 80% 70%, rgba(139,119,101,0.06) 0.5px, transparent 0.5px),
        radial-gradient(circle at 40% 80%, rgba(139,119,101,0.04) 1.5px, transparent 1.5px);
    background-size: 25px 25px, 15px 15px, 35px 35px;
    pointer-events: none;
    z-index: 1;
}

/* Add subtle vintage paper aging effect */
body::after {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: 
        radial-gradient(ellipse at top left, rgba(139,119,101,0.03) 0%, transparent 50%),
        radial-gradient(ellipse at top right, rgba(139,119,101,0.02) 0%, transparent 50%),
        radial-gradient(ellipse at bottom left, rgba(139,119,101,0.025) 0%, transparent 50%),
        radial-gradient(ellipse at bottom right, rgba(139,119,101,0.02) 0%, transparent 50%);
    pointer-events: none;
    z-index: 2;
}

p, h2, span {

    font-family: "Comic Neue", cursive;
    font-weight: 700;
     font-style: italic;
}
.MainContainer{
    display: flex;
    flex-direction: column; /*For vertical stacking the header on top of the content */
    max-width: 1200px;
    margin: 0 auto; /*Centers horizontally block since there's a set width*/
    align-items: center; /*Centers block horizontally in a column flex container*/
    padding: 10px; /*Gives internal spacing*/;
    
}

.HeaderContainer{
    display: flex;
    flex-direction: column; /*Stacks the  title, description, input field & search button on one another.*/
    gap: 10px; /*adds a bit of space between elements in the container*/
}



.InputandSearch{
    display: flex;
    flex-direction: row; /*Puts the input and search button side by side*/
    gap: 5px; /*Adds a little space between them*/
}

.InputField{
    border: 1px solid ; /*Just to see the border around input field slightly*/
    border-radius: 10px; /*Rounds the edges of the input field*/
    padding: 10px; /*adds space between the text and border of the input field*/
    box-sizing: border-box; /*ensures no altering of width and height, when using padding*/
    width: 220px; /*The width of the input field*/
}

.SearchBtn{
    background-color: hsl(0, 1%, 40%); /*Background color of the button*/
    color: white;/*The text is color white*/
    border-radius: 10px;/*rounds the edges of the button*/
    width: 100px;/*the width of the button*/
    padding: 10px; /*Adds space between the buttons text and border*/
    box-sizing: border-box;  /*ensures no altering of width and height, when using padding*/
}

.SearchBtn:hover{
    background-color: hsl(0, 1%, 20%);
    cursor: pointer;
}

.CardGrid{
    display: grid; /*Chose grid due to it being best for card display*/
    grid-template-columns: repeat(3, 1fr); /*Puts heroes in a 3 column format*/
    gap: 10px; /*Puts space between each hero card*/
    
}

/*Display the single card in the middle*/
.SingleCardGrid{
    display: flex;
    justify-content: center;
    align-items: center;
}

.HeroCard{
    border: 3px solid black; /*gives each hero card a tiny border*/
    border-radius: 10px; /*rounds the cards edges*/
    background-color: hsl(0, 0%, 100%); /*background color is white*/
    box-shadow: 0 0 22px hsla(211, 96%, 10%, 0.6); /*subtle shadow around the card*/
    padding: 20px;
    text-align: center;
    transition: transform 0.3s ease;
    
}



.HeroCardImg{
    width: 100%; /*need to set a width for object-fit to work*/
    height: 300px; /*need to set a height for object-fit to work*/
    object-fit:cover; /*crops the image to fit the herocard box*/
    transition: transform 0.3s ease;
}

/*increase the card image slightly*/
.HeroCard:hover .HeroCardImg {
    transform: scale(1.05);
}

/*Apply this to our card when hovered*/
.HeroCard:hover {
    cursor: pointer; /*Just shows a pointer when hovering over the hero card, will make prettier later*/
    transform: scale(1.05) rotate(-2deg); /*Makes the card a bit bigger and turned slightly*/
    border: 8px solid hsl(45, 35%, 83%);
    box-shadow: 0 15px 30px hsla(211, 96%, 20%, 0.8);
}

/*Applies this AFTER we have hovered over our hero card*/
.HeroCard:hover::after {
    content: "BOOM!"; /*text that shows up when card is hovered*/
    position: absolute;/*float text freely*/
    top: 50%;   /*Move down 50%*/
    left: 50%; /*Move right 50%*/
    transform: translate(-50%, -50%); /*Move up/left 50% of the text size*/
    font-family: 'Bangers', cursive;
    font-size: 2rem;
    color: #ff4757;
    text-shadow: 2px 2px 0px #000;
    animation: boomText 0.8s ease-out; /*Shows the animation for 0.8 seconds*/
    animation-fill-mode: forwards; /* This keeps the final state (opacity: 0) */
    
    pointer-events: none; /* Prevents interfering with clicks */
}

@keyframes boomText {
    /* Starts off as invisible & small */
    0% { 
        transform: translate(-50%, -50%) scale(0); 
        opacity: 0; 
    }
    /*The BOOM text pops up big and visible*/
    25% { 
        transform: translate(-50%, -50%) scale(1.2); 
        opacity: 1; 
    }
    /*BOOM becomes normal size and visible*/
    50% { 
        transform: translate(-50%, -50%) scale(1); 
        opacity: 1; 
    }
    /*BOOM text disappears*/
    100% { 
        transform: translate(-50%, -50%) scale(1); 
        opacity: 0; 
    }
}



.ModalOverlay {
  position: fixed; /* Makes modal cover the whole screen */
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  display: flex; /* Center contents horizontally and vertically */
  justify-content: center;
  align-items: center;
  z-index: 1000; /* Ensures that the modal is on top of our webpage */
  background-color: hsla(0, 0%, 0%, 0.5); /* Adds a dark transparent overlay */
}

.ModalCard {
  position: relative; /* Needed to position the close button absolutely inside */
  background-color: #ffeaa7;
  background-image: repeating-linear-gradient(45deg, transparent, transparent 3px, rgba(0,0,0,.05) 3px, rgba(0,0,0,.05) 6px);
  max-width: 500px; /* Prevents modal from being too wide */
  max-height: 80vh; /* Prevents modal from being too tall */
  padding: 20px; /* Internal spacing */
  display: flex;
  flex-direction: column; /* Stack elements vertically */
  gap: 30px; /* Adds space between modal sections */

  border: 8px solid #2d3436; /* Thick dark border */
  border-radius: 0; /* Sharp corners */
  text-align: center; /* Centers modal text */
  box-shadow: 15px 15px 0px #2d3436; /* Vintage offset shadow */ /* Strong shadow around modal */
  overflow-y: auto; /* Allows scrolling if content overflows */
  color: #2d3436;
}

.ModalCardBody {
  display: flex; /* Aligns image and details side by side */
  flex-direction: row;
  gap: 30px; /* Space between image and text */
  align-items: center; /* Align vertically centered */
}

.ModalCardBody img {
  max-width: 150px; /* Ensures image doesn't get too big */
  height: auto; /* Maintains aspect ratio */
}

.ModalCardTitle {
  background-color: black; /* Black background for title bar */
  color: #ffeaa7; /* White text */
  margin: -20px -20px 20px -20px; /* Negative margins to extend background edge to edge */
  padding: 15px 20px; /* Padding inside title */
}

.BasicInfo {
  display: grid; /* Grid layout for label + value */
  grid-template-columns: max-content 1fr; /* First column fits content, second takes remaining space */
  padding: 30px; /* Internal spacing */
  gap: 5px; /* Small gap between items */
}

.Powerstats {
  display: grid; /* Grid layout for powerstat label, bar, and number */
  grid-template-columns: max-content 1fr max-content; /* Label | Bar | Value */
  padding: 30px; /* Internal spacing */
  gap: 10px; /* Space between each part */
  align-items: center; /* Vertically align all items */
}

.StatsBar {
  background-color: lightgray; /* This is the background of the stat bar, like an empty container */
  width: 100%; /* Makes the bar fill the full width of the cell or container it's inside */
  height: 10px; /* Sets the height (thickness) of the bar */
  border-radius: 5px; /* Rounds the edges of the bar for a smoother look */
  overflow: hidden; /* Hides anything that goes outside the rounded corners (like fill overflow) */
}

.StatsFill {
  background-color: rgb(0, 0, 0); /* The filled portion of the bar, showing how much "power" the stat has */
  height: 100%; /* Makes the fill stretch to match the height of the full bar */
  border-radius: 5px 0 0 5px; /* Rounds just the left side of the fill to match the bar shape */
  transition: width 0.3s ease; /* Smoothly animates the width when it changes */
}

.Appearance {
  display: grid; /* Grid layout for appearance section */
  grid-template-columns: max-content 1fr; /* Label on left, value on right */
  padding: 10px; /* Internal spacing */
  gap: 10px; /* Space between label and value */
}

.CloseButton {
  background-color: hsl(0, 100%, 50%); /* Bright red for visibility */
  position: absolute; /* Allows placing it inside modal corner */
  top: 20px; /* Distance from top */
  right: 20px; /* Distance from right */
  padding: 5px; /* Internal padding for button */
  width: 40px; /* Button width */
  align-items: center; /* (Note: align-items only works on flex containers, not buttons directly) */
  color: white; /* White 'X' or icon */
  transition: transform 0.3s ease-in;
}

.CloseButton:hover {
  cursor: pointer;
  background-color: hsl(0, 100%, 30%); /* Darker red on hover for interaction feedback */
  transform: scale(1.03);
}


.errorMessage{
    color: #2d3436;
    background-color: #ffeaa7;
    background-image: repeating-linear-gradient(45deg, transparent, transparent 3px, rgba(0,0,0,.05) 3px, rgba(0,0,0,.05) 6px);
    border: 6px solid #2d3436;
    font-weight: bold;
    border-radius: 0; /* Sharp corners to match modal */
    position: relative;
    display: inline-block;
    margin: 30px 0; /* Space above and below */
    padding: 15px 20px;
    box-shadow: 8px 8px 0px #2d3436; /* Vintage offset shadow */
    animation: slideInShake 0.6s ease-out;
}



/* Entry animation */
@keyframes slideInShake {
    0% { 
        opacity: 0; 
        transform: translateY(-20px); 
    }
    70% { 
        opacity: 1; 
        transform: translateY(0); 
    }
    80% { 
        transform: translateX(-2px); 
    }
    90% { 
        transform: translateX(2px); 
    }
    100% { 
        transform: translateX(0); 
    }
}

/* Prevent body scrolling when modal is open */
body.modal-open {
    overflow: hidden;
}

.resultsMessage{
    color: #2d3436;
    background-color: #e8f5e8;
    background-image: repeating-linear-gradient(45deg, transparent, transparent 3px, rgba(0,100,0,.03) 3px, rgba(0,100,0,.03) 6px);
    border: 4px solid #2d3436;
    font-weight: bold;
    border-radius: 0;
    position: relative;
    display: inline-block;
    margin: 18px 0;
    padding: 12px 18px;
    box-shadow: 6px 6px 0px #2d3436;
    animation: slideInBounce 0.5s ease-out;
}

@keyframes slideInBounce {
    0% { 
        opacity: 0; 
        transform: translateY(-15px) scale(0.95); 
    }
    60% { 
        opacity: 1; 
        transform: translateY(2px) scale(1.02); 
    }
    100% { 
        transform: translateY(0) scale(1); 
    }
}

.loadingContainer {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 20px;
    margin: 50px 0;
}

.spinner {
    width: 50px;
    height: 50px;
    border: 5px solid #2d3436;
    border-top: 5px solid transparent;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    position: relative;
}

.spinner::after {
    content: '';
    position: absolute;
    top: -5px;
    left: -5px;
    right: -5px;
    bottom: -5px;
    border: 2px solid rgba(45, 52, 54, 0.1);
    border-radius: 50%;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.loadingMessage {
    color: #2d3436;
    background-color: #e8f4fd;
    background-image: repeating-linear-gradient(45deg, transparent, transparent 3px, rgba(0,0,255,.03) 3px, rgba(0,0,255,.03) 6px);
    border: 4px solid #2d3436;
    font-weight: bold;
    border-radius: 0;
    padding: 12px 18px;
    box-shadow: 6px 6px 0px #2d3436;
    animation: pulse 2s ease-in-out infinite;
}

@keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.7; }
}